{"version":3,"file":"index.mjs","sources":["../src/fetchBlockFeeHistory.ts","../src/calculateBusyThreshold.ts","../src/fetchBusyThreshold.ts","../src/determineNetworkStatusInfo.ts","../src/gas-util.ts","../src/transaction.ts","../src/version.ts"],"sourcesContent":["import { BN } from 'ethereumjs-util';\nimport { query, fromHex, toHex } from '@metamask/controllers/dist/util';\nimport { GasFeeController } from '@metamask/controllers/dist/gas/GasFeeController';\n\ntype EthQuery = any;\n\n/**\n * @type RequestChunkSpecifier\n *\n * Arguments to `eth_feeHistory` that can be used to fetch a set of historical data.\n * @property blockCount - The number of blocks requested.\n * @property endBlockNumber - The number of the block at the end of the requested range.\n */\ntype RequestChunkSpecifier = {\n  numberOfBlocks: number;\n  endBlockNumber: BN;\n};\n\n/**\n * @type EthFeeHistoryResponse\n *\n * Response data for `eth_feeHistory`.\n * @property oldestBlock - The id of the oldest block (in hex format) in the range of blocks\n * requested.\n * @property baseFeePerGas - Base fee per gas for each block in the range of blocks requested.\n * @property gasUsedRatio - A number between 0 and 1 that represents the gas used vs. gas limit for\n * each block in the range of blocks requested.\n * @property reward - The priority fee at the percentiles requested for each block in the range of\n * blocks requested.\n */\n\nexport type EthFeeHistoryResponse = {\n  oldestBlock: string;\n  baseFeePerGas: string[];\n  gasUsedRatio: number[];\n  reward?: string[][];\n};\n\n/**\n * @type Block\n *\n * Historical data for a particular block.\n * @property number - The number of the block, as a BN.\n * @property baseFeePerGas - The base fee per gas for the block in WEI, as a BN.\n * @property gasUsedRatio - A number between 0 and 1 that represents the ratio between the gas paid\n * for the block and its set gas limit.\n * @property priorityFeesByPercentile - The priority fees paid for the transactions in the block\n * that occurred at particular levels at which those transactions contributed to the overall gas\n * used for the block, indexed by those percentiles. (See docs for {@link fetchBlockFeeHistory} for more\n * on how this works.)\n */\nexport type Block<Percentile extends number> = {\n  number: BN;\n  baseFeePerGas: BN;\n  gasUsedRatio: number;\n  priorityFeesByPercentile: Record<Percentile, BN>;\n};\n\nconst MAX_NUMBER_OF_BLOCKS_PER_ETH_FEE_HISTORY_CALL = 1024;\n\n/**\n * Uses `eth_feeHistory` (an EIP-1559 feature) to obtain information about gas fees from a range of\n * blocks that have occurred recently on a network.\n *\n * To learn more, see these resources:\n *\n * - <https://infura.io/docs/ethereum#operation/eth_feeHistory>\n * - <https://github.com/zsfelfoldi/feehistory/blob/main/docs/feeHistory.md>\n * - <https://github.com/ethereum/go-ethereum/blob/57a3fab8a75eeb9c2f4fab770b73b51b9fe672c5/eth/gasprice/feehistory.go#L180>\n * - <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md>\n * - <https://gas-api.metaswap.codefi.network/testFeeHistory>\n *\n * @param args - The arguments to this function.\n * @param args.ethQuery - An EthQuery instance that wraps a provider for the network in question.\n * @param args.endBlock - The desired end of the requested block range. Can be \"latest\" if you want\n * to start from the latest successful block or the number of a known past block.\n * @param args.numberOfBlocks - How many total blocks to fetch. Note that if this is more than 1024,\n * multiple calls to `eth_feeHistory` will be made.\n * @param args.percentiles - A set of numbers between 1 and 100 which will dictate how\n * `priorityFeesByPercentile` in each returned block will be formed. When Ethereum runs the\n * `eth_feeHistory` method, for each block it is considering, it will first sort all transactions by\n * the priority fee. It will then go through each transaction and add the total amount of gas paid\n * for that transaction to a bucket which maxes out at the total gas used for the whole block. As\n * the bucket fills, it will cross percentages which correspond to the percentiles specified here,\n * and the priority fees of the first transactions which cause it to reach those percentages will be\n * recorded. Hence, `priorityFeesByPercentile` represents the priority fees of transactions at key\n * gas used contribution levels, where earlier levels have smaller contributions and later levels\n * have higher contributions.\n * @returns The list of blocks and their fee data, sorted from oldest to newest.\n */\nexport default async function fetchBlockFeeHistory<Percentile extends number>({\n  ethQuery,\n  numberOfBlocks: totalNumberOfBlocks,\n  endBlock: givenEndBlock = 'latest',\n  percentiles: givenPercentiles = [],\n}: {\n  ethQuery: EthQuery;\n  numberOfBlocks: number;\n  endBlock?: 'latest' | BN;\n  percentiles?: readonly Percentile[];\n}): Promise<Block<Percentile>[]> {\n  const percentiles =\n    givenPercentiles.length > 0 ? Array.from(new Set(givenPercentiles)).sort((a, b) => a - b) : [];\n\n  const finalEndBlockNumber =\n    givenEndBlock === 'latest' ? await query(ethQuery, 'blockNumber') : givenEndBlock;\n\n  const requestChunkSpecifiers = determineRequestChunkSpecifiers(\n    finalEndBlockNumber,\n    totalNumberOfBlocks,\n  );\n\n  const blockChunks = await Promise.all(\n    requestChunkSpecifiers.map(({ numberOfBlocks, endBlockNumber }) => {\n      return makeRequestForChunk({\n        ethQuery,\n        numberOfBlocks,\n        endBlockNumber,\n        percentiles,\n      });\n    }),\n  );\n\n  return blockChunks.reduce((array, blocks) => [...array, ...blocks], [] as Block<Percentile>[]);\n}\n\n/**\n * Uses eth_feeHistory to request historical data about a group of blocks (max size 1024).\n *\n * @param args - The arguments\n * @param args.ethQuery - An EthQuery instance.\n * @param args.numberOfBlocks - The number of blocks in the chunk. Must be at most 1024, as this is\n * the maximum that `eth_feeHistory` can return in one call.\n * @param args.endBlockNumber - The end of the requested block range.\n * @param args.percentiles - A set of numbers betwen 1 and 100 that will be used to pull priority\n * fees for each block.\n * @returns A list of block data.\n */\nasync function makeRequestForChunk<Percentile extends number>({\n  ethQuery,\n  numberOfBlocks,\n  endBlockNumber,\n  percentiles,\n}: {\n  ethQuery: EthQuery;\n  numberOfBlocks: number;\n  endBlockNumber: BN;\n  percentiles: readonly Percentile[];\n}): Promise<Block<Percentile>[]> {\n  const response: EthFeeHistoryResponse = await query(ethQuery, 'eth_feeHistory', [\n    toHex(numberOfBlocks),\n    toHex(endBlockNumber),\n    percentiles,\n  ]);\n\n  const startBlockNumber = fromHex(response.oldestBlock);\n\n  if (\n    response.baseFeePerGas.length > 0 &&\n    response.gasUsedRatio.length > 0 &&\n    (response.reward === undefined || response.reward.length > 0)\n  ) {\n    // Per\n    // <https://github.com/ethereum/go-ethereum/blob/57a3fab8a75eeb9c2f4fab770b73b51b9fe672c5/eth/gasprice/feehistory.go#L191-L192>,\n    // baseFeePerGas will always include an extra item which is the calculated base fee for the\n    // next (future) block. We don't care about this, so chop it off.\n    const baseFeesPerGasAsHex = response.baseFeePerGas.slice(0, numberOfBlocks);\n    const gasUsedRatios = response.gasUsedRatio;\n    const priorityFeePercentileGroups = response.reward ?? [];\n\n    return baseFeesPerGasAsHex.map((baseFeePerGasAsHex, blockIndex) => {\n      const baseFeePerGas = fromHex(baseFeePerGasAsHex);\n      const gasUsedRatio = gasUsedRatios[blockIndex];\n      const number = startBlockNumber.addn(blockIndex);\n\n      const priorityFeesForEachPercentile = priorityFeePercentileGroups[blockIndex];\n\n      const priorityFeesByPercentile = percentiles.reduce((obj, percentile, percentileIndex) => {\n        const priorityFee = priorityFeesForEachPercentile[percentileIndex];\n        return { ...obj, [percentile]: fromHex(priorityFee) };\n      }, {} as Record<Percentile, BN>);\n\n      return {\n        number,\n        baseFeePerGas,\n        gasUsedRatio,\n        priorityFeesByPercentile,\n      };\n    });\n  }\n\n  return [];\n}\n\n/**\n * Divides a block range (specified by a range size and the end of the range) into chunks based on\n * the maximum number of blocks that `eth_feeHistory` can return in a single call.\n *\n * @param endBlockNumber - The final block in the complete desired block range after all\n * `eth_feeHistory` requests have been made.\n * @param totalNumberOfBlocks - The total number of desired blocks after all `eth_feeHistory`\n * requests have been made.\n * @returns A set of arguments that can be used to make requests to `eth_feeHistory` in order to\n * retrieve all of the requested blocks, sorted from oldest block to newest block.\n */\nfunction determineRequestChunkSpecifiers(\n  endBlockNumber: BN,\n  totalNumberOfBlocks: number,\n): RequestChunkSpecifier[] {\n  const specifiers = [];\n  for (\n    let chunkStartBlockNumber = endBlockNumber.subn(totalNumberOfBlocks);\n    chunkStartBlockNumber.lt(endBlockNumber);\n    chunkStartBlockNumber = chunkStartBlockNumber.addn(\n      MAX_NUMBER_OF_BLOCKS_PER_ETH_FEE_HISTORY_CALL,\n    )\n  ) {\n    const distanceToEnd = endBlockNumber.sub(chunkStartBlockNumber).toNumber();\n    const numberOfBlocks =\n      distanceToEnd < MAX_NUMBER_OF_BLOCKS_PER_ETH_FEE_HISTORY_CALL\n        ? distanceToEnd\n        : MAX_NUMBER_OF_BLOCKS_PER_ETH_FEE_HISTORY_CALL;\n    // @ts-ignore\n    const chunkEndBlockNumber = chunkStartBlockNumber.addn(numberOfBlocks);\n    // @ts-ignore\n    specifiers.push({ numberOfBlocks, endBlockNumber: chunkEndBlockNumber });\n  }\n  return specifiers;\n}\n","import { BN } from 'ethereumjs-util';\nimport fetchBlockFeeHistory from './fetchBlockFeeHistory';\n\ntype EthQuery = any;\n\nconst NUMBER_OF_BLOCKS_TO_FETCH = 20_000;\n\n/**\n * Uses historical base fees to determine a threshold we can use to determine whether the network is\n * busy. Specifically, pulls the last 20,000 blocks (which at the time of this writing represents\n * around 2 days), sorts the base fees of those blocks, then chooses the base fee which is 9/10 of\n * the way into the list (i.e. the 90th percentile).\n *\n * @param ethQuery - An EthQuery instance.\n * @returns A promise for the 90th percentile base fee in WEI, as a BN.\n */\nexport async function calculateBusyThreshold(ethQuery: EthQuery): Promise<BN> {\n  const blocks = await fetchBlockFeeHistory({\n    ethQuery,\n    numberOfBlocks: NUMBER_OF_BLOCKS_TO_FETCH,\n  });\n  const sortedBaseFeesPerGas = blocks.map((block) => block.baseFeePerGas).sort((a, b) => a.cmp(b));\n  const indexAtPercentile90 = Math.floor(sortedBaseFeesPerGas.length * 0.9) - 1;\n  return sortedBaseFeesPerGas[indexAtPercentile90];\n}\nexport default calculateBusyThreshold;\n","import { BN } from 'ethereumjs-util';\nimport { handleFetch, gweiDecToWEIBN } from '@metamask/controllers/dist/util';\n\nconst makeClientIdHeader = (clientId: string) => ({ 'X-Client-Id': clientId });\n\n/**\n * Hits a URL that returns a base fee which represents a threshold we can use to determine whether\n * the network is busy.\n *\n * @param url - A URL.\n * @param clientId - The ID of the client making this request.\n * @returns A promise for a base fee in WEI, as a BN.\n */\nexport default async function fetchBusyThreshold(\n  url: string,\n  clientId: string | undefined,\n): Promise<BN> {\n  const options = clientId !== undefined ? { headers: makeClientIdHeader(clientId) } : {};\n  const { busyThreshold: busyBaseFeePerGasThresholdInGwei } = await handleFetch(url, options);\n  return gweiDecToWEIBN(busyBaseFeePerGasThresholdInGwei);\n}\n","import { BN } from 'ethereumjs-util';\nimport fetchBusyThreshold from './fetchBusyThreshold';\nimport { calculateBusyThreshold } from './calculateBusyThreshold';\n\ntype EthQuery = any;\n\nexport type NetworkStatusInfo = {\n  isNetworkBusy: boolean;\n};\n\n/**\n * Collects information about the status of the network. Right now the only piece of information is\n * whether the network is \"busy\" — i.e., whether the base fee for the latest block exceeds a\n * particular \"busy\" threshold.\n *\n * @param args - The arguments.\n * @param args.latestBaseFee - The base fee for the latest block in WEI.\n * @param args.url - The URL for the API used to determine a base fee threshold.\n * @param args.ethQuery - An EthQuery instance.\n * @param args.clientId - The ID of the client making this request.\n * @returns The network status info.\n */\nexport default async function determineNetworkStatusInfo({\n  latestBaseFee,\n  url,\n  ethQuery,\n  clientId,\n}: {\n  latestBaseFee: BN;\n  url: string;\n  ethQuery: EthQuery;\n  clientId: string | undefined;\n}): Promise<NetworkStatusInfo> {\n  let busyBaseFeeThreshold;\n  try {\n    busyBaseFeeThreshold = await fetchBusyThreshold(url, clientId);\n  } catch (error) {\n    // @ts-ignore\n    console.error(`Fetching busy threshold failed due to (${error.message}), trying fallback`);\n    busyBaseFeeThreshold = await calculateBusyThreshold(ethQuery);\n  }\n\n  const isNetworkBusy = latestBaseFee.gte(busyBaseFeeThreshold);\n\n  return { isNetworkBusy };\n}\n","import { BN } from 'ethereumjs-util';\nimport {\n  query,\n  handleFetch,\n  gweiDecToWEIBN,\n  weiHexToGweiDec,\n} from '@metamask/controllers/dist/util';\nimport {\n  GasFeeEstimates,\n  EthGasPriceEstimate,\n  EstimatedGasFeeTimeBounds,\n  unknownString,\n  LegacyGasPriceEstimate,\n} from '@metamask/controllers/dist/gas/GasFeeController';\n\nconst makeClientIdHeader = (clientId: string) => ({ 'X-Client-Id': clientId });\n\n/**\n * Convert a decimal GWEI value to a decimal string rounded to the nearest WEI.\n *\n * @param n - The input GWEI amount, as a decimal string or a number.\n * @returns The decimal string GWEI amount.\n */\nexport function normalizeGWEIDecimalNumbers(n: string | number) {\n  const numberAsWEIHex = gweiDecToWEIBN(n).toString(16);\n\n  const numberAsGWEI = weiHexToGweiDec(numberAsWEIHex).toString(10);\n  return numberAsGWEI;\n}\n\n/**\n * Fetch gas estimates from the given URL.\n *\n * @param url - The gas estimate URL.\n * @param clientId - The client ID used to identify to the API who is asking for estimates.\n * @returns The gas estimates.\n */\nexport async function fetchGasEstimates(url: string, clientId?: string): Promise<GasFeeEstimates> {\n  const estimates = await handleFetch(\n    url,\n    clientId ? { headers: makeClientIdHeader(clientId) } : undefined,\n  );\n  return {\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.low.suggestedMaxPriorityFeePerGas,\n      ),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.medium.suggestedMaxPriorityFeePerGas,\n      ),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.high.suggestedMaxPriorityFeePerGas,\n      ),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),\n    },\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    historicalBaseFeeRange: estimates.historicalBaseFeeRange,\n    baseFeeTrend: estimates.baseFeeTrend,\n    latestPriorityFeeRange: estimates.latestPriorityFeeRange,\n    historicalPriorityFeeRange: estimates.historicalPriorityFeeRange,\n    priorityFeeTrend: estimates.priorityFeeTrend,\n    networkCongestion: estimates.networkCongestion,\n  };\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n *\n * @param url - The URL to fetch gas price estimates from.\n * @param clientId - The client ID used to identify to the API who is asking for estimates.\n * @returns The gas price estimates.\n */\nexport async function fetchLegacyGasPriceEstimates(\n  url: string,\n  clientId?: string,\n): Promise<LegacyGasPriceEstimate> {\n  const result = await handleFetch(url, {\n    referrer: url,\n    referrerPolicy: 'no-referrer-when-downgrade',\n    method: 'GET',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json',\n      ...(clientId && makeClientIdHeader(clientId)),\n    },\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\n/**\n * Get a gas price estimate from the network using the `eth_gasPrice` method.\n *\n * @param ethQuery - The EthQuery instance to call the network with.\n * @returns A gas price estimate.\n */\nexport async function fetchEthGasPriceEstimate(ethQuery: any): Promise<EthGasPriceEstimate> {\n  const gasPrice = await query(ethQuery, 'gasPrice');\n  return {\n    gasPrice: weiHexToGweiDec(gasPrice).toString(),\n  };\n}\n\n/**\n * Estimate the time it will take for a transaction to be confirmed.\n *\n * @param maxPriorityFeePerGas - The max priority fee per gas.\n * @param maxFeePerGas - The max fee per gas.\n * @param gasFeeEstimates - The gas fee estimates.\n * @returns The estimated lower and upper bounds for when this transaction will be confirmed.\n */\nexport function calculateTimeEstimate(\n  maxPriorityFeePerGas: string,\n  maxFeePerGas: string,\n  gasFeeEstimates: GasFeeEstimates,\n): EstimatedGasFeeTimeBounds {\n  const { low, medium, high, estimatedBaseFee } = gasFeeEstimates;\n\n  const maxPriorityFeePerGasInWEI = gweiDecToWEIBN(maxPriorityFeePerGas);\n  const maxFeePerGasInWEI = gweiDecToWEIBN(maxFeePerGas);\n  const estimatedBaseFeeInWEI = gweiDecToWEIBN(estimatedBaseFee);\n\n  const effectiveMaxPriorityFee = BN.min(\n    maxPriorityFeePerGasInWEI,\n    maxFeePerGasInWEI.sub(estimatedBaseFeeInWEI),\n  );\n\n  const lowMaxPriorityFeeInWEI = gweiDecToWEIBN(low.suggestedMaxPriorityFeePerGas);\n  const mediumMaxPriorityFeeInWEI = gweiDecToWEIBN(medium.suggestedMaxPriorityFeePerGas);\n  const highMaxPriorityFeeInWEI = gweiDecToWEIBN(high.suggestedMaxPriorityFeePerGas);\n\n  let lowerTimeBound;\n  let upperTimeBound;\n\n  if (effectiveMaxPriorityFee.lt(lowMaxPriorityFeeInWEI)) {\n    lowerTimeBound = null;\n    upperTimeBound = 'unknown' as unknownString;\n  } else if (\n    effectiveMaxPriorityFee.gte(lowMaxPriorityFeeInWEI) &&\n    effectiveMaxPriorityFee.lt(mediumMaxPriorityFeeInWEI)\n  ) {\n    lowerTimeBound = low.minWaitTimeEstimate;\n    upperTimeBound = low.maxWaitTimeEstimate;\n  } else if (\n    effectiveMaxPriorityFee.gte(mediumMaxPriorityFeeInWEI) &&\n    effectiveMaxPriorityFee.lt(highMaxPriorityFeeInWEI)\n  ) {\n    lowerTimeBound = medium.minWaitTimeEstimate;\n    upperTimeBound = medium.maxWaitTimeEstimate;\n  } else if (effectiveMaxPriorityFee.eq(highMaxPriorityFeeInWEI)) {\n    lowerTimeBound = high.minWaitTimeEstimate;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  } else {\n    lowerTimeBound = 0;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  }\n\n  return {\n    lowerTimeBound,\n    upperTimeBound,\n  };\n}\n","import { TransactionFactory, TypedTransaction } from '@ethereumjs/tx';\n\nimport { EventEmitter } from 'events';\nimport { addHexPrefix, bufferToHex, BN } from 'ethereumjs-util';\n\nconst HARDFORK = 'london';\n\n/**\n * @type Result\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\n/**\n * @type Fetch All Options\n * @property fromBlock - String containing a specific block decimal number\n * @property etherscanApiKey - API key to be used to fetch token transactions\n */\nexport interface FetchAllOptions {\n  fromBlock?: string;\n  etherscanApiKey?: string;\n}\n\n/**\n * @type Transaction\n *\n * Transaction representation\n * @property chainId - Network ID as per EIP-155\n * @property data - Data to pass with this transaction\n * @property from - Address to send this transaction from\n * @property gas - Gas to send with this transaction\n * @property gasPrice - Price of gas with this transaction\n * @property gasUsed -  Gas used in the transaction\n * @property nonce - Unique number to prevent replay attacks\n * @property to - Address to send this transaction to\n * @property value - Value associated with this transaction\n */\nexport interface Transaction {\n  chainId?: number;\n  data?: string;\n  from: string;\n  gas?: string;\n  gasPrice?: string;\n  gasUsed?: string;\n  nonce?: string;\n  to?: string;\n  value?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n  estimatedBaseFee?: string;\n}\n\nexport interface GasPriceValue {\n  gasPrice: string;\n}\n\nexport interface FeeMarketEIP1559Values {\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n}\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\nexport enum TransactionStatus {\n  approved = 'approved',\n  cancelled = 'cancelled',\n  confirmed = 'confirmed',\n  failed = 'failed',\n  rejected = 'rejected',\n  signed = 'signed',\n  submitted = 'submitted',\n  unapproved = 'unapproved',\n}\n\ntype TransactionMetaBase = {\n  isTransfer?: boolean;\n  transferInformation?: {\n    symbol: string;\n    contractAddress: string;\n    decimals: number;\n  };\n  id: string;\n  networkID?: string;\n  chainId?: string;\n  origin?: string;\n  rawTransaction?: string;\n  time: number;\n  toSmartContract?: boolean;\n  transaction: Transaction;\n  transactionHash?: string;\n  blockNumber?: string;\n  verifiedOnBlockchain?: boolean;\n};\n\n/**\n * @type TransactionMeta\n *\n * TransactionMeta representation\n * @property error - Synthesized error information for failed transactions\n * @property id - Generated UUID associated with this transaction\n * @property networkID - Network code as per EIP-155 for this transaction\n * @property origin - Origin this transaction was sent from\n * @property deviceConfirmedOn - string to indicate what device the transaction was confirmed\n * @property rawTransaction - Hex representation of the underlying transaction\n * @property status - String status of this transaction\n * @property time - Timestamp associated with this transaction\n * @property toSmartContract - Whether transaction recipient is a smart contract\n * @property transaction - Underlying Transaction object\n * @property transactionHash - Hash of a successful transaction\n * @property blockNumber - Number of the block where the transaction has been included\n */\nexport type TransactionMeta =\n  | ({\n      status: Exclude<TransactionStatus, TransactionStatus.failed>;\n    } & TransactionMetaBase)\n  | ({ status: TransactionStatus.failed; error: Error } & TransactionMetaBase);\n","/// <type=\"VERSION\">\nexport const version = 'development/0.2.0';\n"],"names":["makeClientIdHeader"],"mappings":";;;AACA,MAAM,6CAA6C,GAAG,IAAI,CAAC;AAC5C,eAAe,oBAAoB,CAAC;AACnD,EAAE,QAAQ;AACV,EAAE,cAAc,EAAE,mBAAmB;AACrC,EAAE,QAAQ,EAAE,aAAa,GAAG,QAAQ;AACpC,EAAE,WAAW,EAAE,gBAAgB,GAAG,EAAE;AACpC,CAAC,EAAE;AACH,EAAE,MAAM,WAAW,GAAG,gBAAgB,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;AACrH,EAAE,MAAM,mBAAmB,GAAG,aAAa,KAAK,QAAQ,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,aAAa,CAAC,GAAG,aAAa,CAAC;AAChH,EAAE,MAAM,sBAAsB,GAAG,+BAA+B,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,CAAC;AAC3G,EAAE,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,EAAE,cAAc,EAAE,cAAc,EAAE,KAAK;AAC3G,IAAI,OAAO,mBAAmB,CAAC;AAC/B,MAAM,QAAQ;AACd,MAAM,cAAc;AACpB,MAAM,cAAc;AACpB,MAAM,WAAW;AACjB,KAAK,CAAC,CAAC;AACP,GAAG,CAAC,CAAC,CAAC;AACN,EAAE,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,MAAM,KAAK,CAAC,GAAG,KAAK,EAAE,GAAG,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;AAC1E,CAAC;AACD,eAAe,mBAAmB,CAAC;AACnC,EAAE,QAAQ;AACV,EAAE,cAAc;AAChB,EAAE,cAAc;AAChB,EAAE,WAAW;AACb,CAAC,EAAE;AACH,EAAE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,gBAAgB,EAAE;AAC3D,IAAI,KAAK,CAAC,cAAc,CAAC;AACzB,IAAI,KAAK,CAAC,cAAc,CAAC;AACzB,IAAI,WAAW;AACf,GAAG,CAAC,CAAC;AACL,EAAE,MAAM,gBAAgB,GAAG,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;AACzD,EAAE,IAAI,QAAQ,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,KAAK,QAAQ,CAAC,MAAM,KAAK,KAAK,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;AAC3I,IAAI,MAAM,mBAAmB,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;AAChF,IAAI,MAAM,aAAa,GAAG,QAAQ,CAAC,YAAY,CAAC;AAChD,IAAI,MAAM,2BAA2B,GAAG,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC;AAC9D,IAAI,OAAO,mBAAmB,CAAC,GAAG,CAAC,CAAC,kBAAkB,EAAE,UAAU,KAAK;AACvE,MAAM,MAAM,aAAa,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AACxD,MAAM,MAAM,YAAY,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC;AACrD,MAAM,MAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACvD,MAAM,MAAM,6BAA6B,GAAG,2BAA2B,CAAC,UAAU,CAAC,CAAC;AACpF,MAAM,MAAM,wBAAwB,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,eAAe,KAAK;AAChG,QAAQ,MAAM,WAAW,GAAG,6BAA6B,CAAC,eAAe,CAAC,CAAC;AAC3E,QAAQ,OAAO,EAAE,GAAG,GAAG,EAAE,CAAC,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;AAC9D,OAAO,EAAE,EAAE,CAAC,CAAC;AACb,MAAM,OAAO;AACb,QAAQ,MAAM;AACd,QAAQ,aAAa;AACrB,QAAQ,YAAY;AACpB,QAAQ,wBAAwB;AAChC,OAAO,CAAC;AACR,KAAK,CAAC,CAAC;AACP,GAAG;AACH,EAAE,OAAO,EAAE,CAAC;AACZ,CAAC;AACD,SAAS,+BAA+B,CAAC,cAAc,EAAE,mBAAmB,EAAE;AAC9E,EAAE,MAAM,UAAU,GAAG,EAAE,CAAC;AACxB,EAAE,KAAK,IAAI,qBAAqB,GAAG,cAAc,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,qBAAqB,CAAC,EAAE,CAAC,cAAc,CAAC,EAAE,qBAAqB,GAAG,qBAAqB,CAAC,IAAI,CAAC,6CAA6C,CAAC,EAAE;AAC1N,IAAI,MAAM,aAAa,GAAG,cAAc,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC/E,IAAI,MAAM,cAAc,GAAG,aAAa,GAAG,6CAA6C,GAAG,aAAa,GAAG,6CAA6C,CAAC;AACzJ,IAAI,MAAM,mBAAmB,GAAG,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAC3E,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE,cAAc,EAAE,cAAc,EAAE,mBAAmB,EAAE,CAAC,CAAC;AAC7E,GAAG;AACH,EAAE,OAAO,UAAU,CAAC;AACpB;;;;;;;AChEA,MAAM,yBAAyB,GAAG,GAAG,CAAC;AAC/B,eAAe,sBAAsB,CAAC,QAAQ,EAAE;AACvD,EAAE,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC;AAC5C,IAAI,QAAQ;AACZ,IAAI,cAAc,EAAE,yBAAyB;AAC7C,GAAG,CAAC,CAAC;AACL,EAAE,MAAM,oBAAoB,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACnG,EAAE,MAAM,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;AAChF,EAAE,OAAO,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;AACnD;;;;;;;;ACTA,MAAMA,oBAAkB,GAAG,CAAC,QAAQ,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC;AACxD,eAAe,kBAAkB,CAAC,GAAG,EAAE,QAAQ,EAAE;AAChE,EAAE,MAAM,OAAO,GAAG,QAAQ,KAAK,KAAK,CAAC,GAAG,EAAE,OAAO,EAAEA,oBAAkB,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC;AACvF,EAAE,MAAM,EAAE,aAAa,EAAE,gCAAgC,EAAE,GAAG,MAAM,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC9F,EAAE,OAAO,cAAc,CAAC,gCAAgC,CAAC,CAAC;AAC1D;;;;;;;ACJe,eAAe,0BAA0B,CAAC;AACzD,EAAE,aAAa;AACf,EAAE,GAAG;AACL,EAAE,QAAQ;AACV,EAAE,QAAQ;AACV,CAAC,EAAE;AACH,EAAE,IAAI,oBAAoB,CAAC;AAC3B,EAAE,IAAI;AACN,IAAI,oBAAoB,GAAG,MAAM,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AACnE,GAAG,CAAC,OAAO,KAAK,EAAE;AAClB,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,uCAAuC,EAAE,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAC/F,IAAI,oBAAoB,GAAG,MAAM,sBAAsB,CAAC,QAAQ,CAAC,CAAC;AAClE,GAAG;AACH,EAAE,MAAM,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;AAChE,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC;AAC3B;;;;;;;ACVA,MAAM,kBAAkB,GAAG,CAAC,QAAQ,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC;AAChE,SAAS,2BAA2B,CAAC,CAAC,EAAE;AAC/C,EAAE,MAAM,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACxD,EAAE,MAAM,YAAY,GAAG,eAAe,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACpE,EAAE,OAAO,YAAY,CAAC;AACtB,CAAC;AACM,eAAe,iBAAiB,CAAC,GAAG,EAAE,QAAQ,EAAE;AACvD,EAAE,MAAM,SAAS,GAAG,MAAM,WAAW,CAAC,GAAG,EAAE,QAAQ,GAAG,EAAE,OAAO,EAAE,kBAAkB,CAAC,QAAQ,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC;AAC1G,EAAE,OAAO;AACT,IAAI,GAAG,EAAE;AACT,MAAM,GAAG,SAAS,CAAC,GAAG;AACtB,MAAM,6BAA6B,EAAE,2BAA2B,CAAC,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAC;AAC7G,MAAM,qBAAqB,EAAE,2BAA2B,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC;AAC7F,KAAK;AACL,IAAI,MAAM,EAAE;AACZ,MAAM,GAAG,SAAS,CAAC,MAAM;AACzB,MAAM,6BAA6B,EAAE,2BAA2B,CAAC,SAAS,CAAC,MAAM,CAAC,6BAA6B,CAAC;AAChH,MAAM,qBAAqB,EAAE,2BAA2B,CAAC,SAAS,CAAC,MAAM,CAAC,qBAAqB,CAAC;AAChG,KAAK;AACL,IAAI,IAAI,EAAE;AACV,MAAM,GAAG,SAAS,CAAC,IAAI;AACvB,MAAM,6BAA6B,EAAE,2BAA2B,CAAC,SAAS,CAAC,IAAI,CAAC,6BAA6B,CAAC;AAC9G,MAAM,qBAAqB,EAAE,2BAA2B,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC;AAC9F,KAAK;AACL,IAAI,gBAAgB,EAAE,2BAA2B,CAAC,SAAS,CAAC,gBAAgB,CAAC;AAC7E,IAAI,sBAAsB,EAAE,SAAS,CAAC,sBAAsB;AAC5D,IAAI,YAAY,EAAE,SAAS,CAAC,YAAY;AACxC,IAAI,sBAAsB,EAAE,SAAS,CAAC,sBAAsB;AAC5D,IAAI,0BAA0B,EAAE,SAAS,CAAC,0BAA0B;AACpE,IAAI,gBAAgB,EAAE,SAAS,CAAC,gBAAgB;AAChD,IAAI,iBAAiB,EAAE,SAAS,CAAC,iBAAiB;AAClD,GAAG,CAAC;AACJ,CAAC;AACM,eAAe,4BAA4B,CAAC,GAAG,EAAE,QAAQ,EAAE;AAClE,EAAE,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,GAAG,EAAE;AACxC,IAAI,QAAQ,EAAE,GAAG;AACjB,IAAI,cAAc,EAAE,4BAA4B;AAChD,IAAI,MAAM,EAAE,KAAK;AACjB,IAAI,IAAI,EAAE,MAAM;AAChB,IAAI,OAAO,EAAE;AACb,MAAM,cAAc,EAAE,kBAAkB;AACxC,MAAM,GAAG,QAAQ,IAAI,kBAAkB,CAAC,QAAQ,CAAC;AACjD,KAAK;AACL,GAAG,CAAC,CAAC;AACL,EAAE,OAAO;AACT,IAAI,GAAG,EAAE,MAAM,CAAC,YAAY;AAC5B,IAAI,MAAM,EAAE,MAAM,CAAC,eAAe;AAClC,IAAI,IAAI,EAAE,MAAM,CAAC,YAAY;AAC7B,GAAG,CAAC;AACJ,CAAC;AACM,eAAe,wBAAwB,CAAC,QAAQ,EAAE;AACzD,EAAE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AACrD,EAAE,OAAO;AACT,IAAI,QAAQ,EAAE,eAAe,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE;AAClD,GAAG,CAAC;AACJ,CAAC;AACM,SAAS,qBAAqB,CAAC,oBAAoB,EAAE,YAAY,EAAE,eAAe,EAAE;AAC3F,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAE,GAAG,eAAe,CAAC;AAClE,EAAE,MAAM,yBAAyB,GAAG,cAAc,CAAC,oBAAoB,CAAC,CAAC;AACzE,EAAE,MAAM,iBAAiB,GAAG,cAAc,CAAC,YAAY,CAAC,CAAC;AACzD,EAAE,MAAM,qBAAqB,GAAG,cAAc,CAAC,gBAAgB,CAAC,CAAC;AACjE,EAAE,MAAM,uBAAuB,GAAG,EAAE,CAAC,GAAG,CAAC,yBAAyB,EAAE,iBAAiB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAClH,EAAE,MAAM,sBAAsB,GAAG,cAAc,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;AACnF,EAAE,MAAM,yBAAyB,GAAG,cAAc,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC;AACzF,EAAE,MAAM,uBAAuB,GAAG,cAAc,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;AACrF,EAAE,IAAI,cAAc,CAAC;AACrB,EAAE,IAAI,cAAc,CAAC;AACrB,EAAE,IAAI,uBAAuB,CAAC,EAAE,CAAC,sBAAsB,CAAC,EAAE;AAC1D,IAAI,cAAc,GAAG,IAAI,CAAC;AAC1B,IAAI,cAAc,GAAG,SAAS,CAAC;AAC/B,GAAG,MAAM,IAAI,uBAAuB,CAAC,GAAG,CAAC,sBAAsB,CAAC,IAAI,uBAAuB,CAAC,EAAE,CAAC,yBAAyB,CAAC,EAAE;AAC3H,IAAI,cAAc,GAAG,GAAG,CAAC,mBAAmB,CAAC;AAC7C,IAAI,cAAc,GAAG,GAAG,CAAC,mBAAmB,CAAC;AAC7C,GAAG,MAAM,IAAI,uBAAuB,CAAC,GAAG,CAAC,yBAAyB,CAAC,IAAI,uBAAuB,CAAC,EAAE,CAAC,uBAAuB,CAAC,EAAE;AAC5H,IAAI,cAAc,GAAG,MAAM,CAAC,mBAAmB,CAAC;AAChD,IAAI,cAAc,GAAG,MAAM,CAAC,mBAAmB,CAAC;AAChD,GAAG,MAAM,IAAI,uBAAuB,CAAC,EAAE,CAAC,uBAAuB,CAAC,EAAE;AAClE,IAAI,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;AAC9C,IAAI,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;AAC9C,GAAG,MAAM;AACT,IAAI,cAAc,GAAG,CAAC,CAAC;AACvB,IAAI,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;AAC9C,GAAG;AACH,EAAE,OAAO;AACT,IAAI,cAAc;AAClB,IAAI,cAAc;AAClB,GAAG,CAAC;AACJ;;;;;;;;;;;AC7FO,IAAI,iBAAiB,mBAAmB,CAAC,CAAC,kBAAkB,KAAK;AACxE,EAAE,kBAAkB,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC;AAC9C,EAAE,kBAAkB,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC;AAChD,EAAE,kBAAkB,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC;AAChD,EAAE,kBAAkB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;AAC1C,EAAE,kBAAkB,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC;AAC9C,EAAE,kBAAkB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;AAC1C,EAAE,kBAAkB,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC;AAChD,EAAE,kBAAkB,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;AAClD,EAAE,OAAO,kBAAkB,CAAC;AAC5B,CAAC,EAAE,iBAAiB,IAAI,EAAE,CAAC;;;;;;;ACXpB,MAAM,OAAO,GAAG,mBAAmB;;;;;;;;;"}